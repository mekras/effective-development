Стандарт оформления кода
========================

Набор правил и соглашений, используемых при написании исходного кода на некотором языке
программирования.

Назначение документа — повышение эффективности разработчиков за счёт облегчения восприятия кода и
снижения количества ошибок.

Хороший стандарт оформления кода должен учитывать:

#. какие действия с кодом чаще всего выполняют программисты.
#. какие факторы могут мешать выполнять эти действия или способствовать появлению ошибок.

Давайте разберём распространённые случаи.

Как программисты работают с кодом
---------------------------------

Чтение кода
^^^^^^^^^^^

Программисты постоянно читают код. И здесь для программиста самое важное — **правильно** и
**быстро** понять написанное. Как сказал Мартин Фаулер:

.. pull-quote::
   Любой дурак может написать код, понятный компьютеру.
   Хороший программист пишет код, понятный человеку.

Какие проблемы у программиста могут возникнуть при чтении кода?

Непонятный код
""""""""""""""

**Заумный код**

Некоторые программисты любят использовать «красивые» конструкции, которые часто непонятны с
первого взгляда.

Сравните два фрагмента, делающих одно и то же.

.. code-block:: javascript

   a < b ? console.log('true') | alert('Hi!') : console.log('false')

.. code-block:: javascript

   if (a < b) {
     console.log('true')
     alert('Hi!')
   } else {
     console.log('false')
   }

Согласитесь, что понять второй вариант проще и взглядом он считывается мгновенно, тогда как первый
вариант заставляет задуматься и потратить несколько секунд на понимание.

К чему это приводит? Программисты, читающие такой код, тратят больше времени на понимание логики.
При изменении такого кода возрастает риск ошибок из-за неправильного его понимания.

**Чрезмерная краткость**

.. todo:: Привести пример чрезмерной краткости в коде.

**Неряшливый код**

.. todo:: Привести пример «неряшливого» кода.

Разный стиль
""""""""""""

Люди плохо воспринимают непривычное. Когда разработчик видит непривычно оформленный код, то
основное внимание он уделяет его форме, а не содержанию. А недостаточное внимание к содержанию может
привести к возникновению ошибок.

Если оформление очень уж сильно отличается от привычного, это может вызывать раздражение и
предубеждение к такому коду или даже к его автору. Увы, наш мозг так устроен, что «некрасивый» код
может начать воспринимать как «неправильный». Иногда раздражение может перекидываться и на самого
автора кода, что может заставить нас подсознательно воспринимать все его решения как «плохие» или
«неправильные».

Поиск в коде
^^^^^^^^^^^^

**Сложность поиска**

Слияние версий кода
^^^^^^^^^^^^^^^^^^^



Статический анализ кода
^^^^^^^^^^^^^^^^^^^^^^^

Статический анализ кода — мощное средство повышения качества и эффективности, без которого сложно
представить современную разработку ПО. Подробнее см. :doc:`/practice/static_code_analysis`.

Порог вхождения для новых разработчиков
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Шаблон стандарта оформления кода
--------------------------------

Описанное в этом разделе — лишь примерный шаблон стандарта. Обязательно учитывайте ваши условия:
особенности проекта, команды, используемых языков и т. п.

----

.. note::
   Ключевые слова НЕОБХОДИМО (ТРЕБУЕТСЯ, НУЖНО, ДОЛЖНО БЫТЬ), НЕДОПУСТИМО (НЕ ПОЗВОЛЯЕТСЯ), СЛЕДУЕТ
   (РЕКОМЕНДУЕТСЯ), НЕ СЛЕДУЕТ (НЕ РЕКОМЕНДУЕТСЯ), ВОЗМОЖНО, НЕОБЯЗАТЕЛЬНО в данном разделе должны
   интерпретироваться в соответствии с требованиями `RFC 2119 <http://rfc.com.ru/rfc2119.htm>`_.

1. Общие принципы оформления кода
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**1.1.** НЕОБХОДИМО оформлять код так, чтобы:

| **а)** облегчить чтение и понимание кода как членами команды, так и другими разработчиками;
| **б)** ускорить поиск в коде нужных сведений;
| **в)** упростить слияние разных версий (веток) кода;
| **г)** способствовать статическому анализу кода;
| **д)** снизить порог вхождения для новых членов команды.

**1.2.** В случае противоречий между целями из п. **1.1** НЕОБХОДИМО отдавать предпочтение цели,
расположенной выше в списке. Однако при этом также НЕОБХОДИМО учитывать значимость и вероятность
устраняемых проблем. Примеры:

- запись облегчающая понимание, но усложняющая слияние версий допустима;
- запись усложняющая понимание, но упрощающая слияние версий недопустима;
- запись не сильно облегчающая понимание, но сильно усложняющая слияние версий нежелательна.

#. Приоритеты

  #. Ошибки
  #. Слияние
  #. Единообразие
  #. Наглядность, ясность.
  #. Статический анализ.
  #. Следование сложившимся традициям
